spring.devtools.add-properties=false
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

# aws ses

aws.ses.access-key=${AWS_ACCESS_KEY}
aws.ses.secret-key=${AWS_SECRET_KEY}

# micro

micro.frontend.url=${FRONTEND_URL}
aws.s3.url=${S3_URL}

# microservice

micro.main-server.url=${MAIN_SERVER_URL}

# redis

spring.redis.host=${REDIS_HOST}
spring.redis.password=
spring.redis.port=6379

# jwt
jwt.secret=${SECRET}
jwt.tokenvalidtime=1800000
jwt.refresh.tokenvalidtime=1209600000

# postgres db setting
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PW}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# hibernate setting
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true

# OAuth 2.0 Setting

spring.security.oauth2.client.registration.twitter.client-id=${TWITTER_CLIENT_ID}
spring.security.oauth2.client.registration.twitter.clientSecret=${TWITTER_CLIENT_SECRET}
spring.security.oauth2.client.registration.twitter.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.twitter.scope=users.read,tweet.read
spring.security.oauth2.client.registration.twitter.redirect-uri={baseUrl}/oauth2/code/{registrationId}

spring.security.oauth2.client.provider.twitter.authorization-uri=https://twitter.com/i/oauth2/authorize?code_challenge=challenge&code_challenge_method=plain
spring.security.oauth2.client.provider.twitter.token-uri=https://api.twitter.com/2/oauth2/token
spring.security.oauth2.client.provider.twitter.user-info-uri=https://api.twitter.com/2/users/me?user.fields=id,name,username,profile_image_url,description
spring.security.oauth2.client.provider.twitter.user-name-attribute=data